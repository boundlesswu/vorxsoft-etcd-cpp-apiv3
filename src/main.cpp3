#include <iostream>
#include <memory>
#include <string>
#include <exception>
#include <stdexcept> 

#include <grpc++/grpc++.h>

//#include "catch.hpp"

//#include "etcd/Client.hpp"
//#include "etcd/Watcher.hpp"
//#include "etcd/SyncClient.hpp"
#include "VorxService.h"

using namespace std;
using namespace Vorx;
using namespace google::protobuf;


static std::string etcd_uri("http://192.168.20.251:2379");
static int watcher_called = 0;
bool deleted = false;


void printResponse(etcd::Response const & resp)
{
	++watcher_called;
	std::cout << "print response called" << std::endl;
	if (resp.error_code())
		std::cout << resp.error_code() << ": " << resp.error_message() << std::endl;
	else
	{
		std::cout << resp.action() << " " <<resp.value().as_string() << std::endl;
		std::cout << "Previous value: " << resp.prev_value().as_string() << std::endl;
		if (resp.action() == "delete") {
			deleted = true;
		}
	}
	return;
}


int main() 
{
	std::string servicename("vag");
	std::string host("192.168.2.222");
	int port = 2222;
	google::protobuf::int64 ttl = 10;
	//服务初始化
	VorxService vag_service(servicename,host,port,etcd_uri,ttl);
	//服务注册
	int ret = vag_service.Registe();
	if (ret < 0) {
		std::cout << "register to " << etcd_uri << "error" << std::endl;
		return -1;
	}
	else {
		std::cout << "success register to " << etcd_uri << std::endl;
	}
	//新建心跳线程
	vag_service.NewAutoHeartBeatThread(ttl);
	std::string serviceaddress;
	vag_service.SetWatcher(printResponse);
	do {
		Sleep((ttl-1) * 1000);

		serviceaddress = vag_service.Reslove(servicename, Vorx::VorxService::ROUND);
		if (!serviceaddress.empty())
			cout << "resolve vag service address is " << vag_service.Reslove(servicename, Vorx::VorxService::ROUND) << endl;
		else
			cout << "resolve vag service error,and not vag service address found!" << endl;

	} while (1);
	return 0;
}


